name: Build and Publish Utility Tools


on:   
  workflow_dispatch: 
# on:
#   push:
#     branches-ignore:
#       - 'main'
#     paths:
#       - '.github/workflows/ci.yaml'   # Trigger when ci.yaml is modified
#       - 'Makefile'                    # Trigger when Makefile is modified
#       - 'src/**'                      # Trigger when any file in the src directory is modified

jobs:
  build_and_push_artifactory:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.11"
      
      - name: Setup Git access
        run: git config --global url.https://${{ secrets.GHA_ACCESS_TOKEN }}@github.com/zibroo.insteadOf https://github.com/zibroo/
  
      # - name: secrets
      #   run: v ARTIFACTORY_PASSWORD secret/service/artifactory/drone value

      - name: Check for changes in src/db_query
        id: db_query_changes
        run: |
          ls
          pwd 
          git diff --quiet HEAD^ HEAD src/db_query/ || echo "db_query"
      
      - name: Check for changes in src/opsgenie_client
        id: opsgenie_client_changes
        run: |
          git diff --quiet HEAD^ HEAD src/opsgenie_client/ || echo "opsgenie_client"
      
      - name: Check for changes in src/vault_auth
        id: vault_auth_changes
        run: |
          git diff --quiet HEAD^ HEAD src/vault_auth/ || echo "vault_auth"

      - name: Set matrix for changed tools
        id: set-matrix
        run: |
          TOOLS=""
          if [ -n "$(steps.db_query_changes.outputs.result)" ]; then TOOLS="${TOOLS} db_query"; fi
          if [ -n "$(steps.opsgenie_client_changes.outputs.result)" ]; then TOOLS="${TOOLS} opsgenie_client"; fi
          if [ -n "$(steps.vault_auth_changes.outputs.result)" ]; then TOOLS="${TOOLS} vault_auth"; fi
          echo "::set-output name=matrix::{\"tool\": [${TOOLS}]}"
        
      - name: Get version from setup.py
        id: get-version
        run: |
          VERSION=$(grep -Po '(?<=version=")[^"]*' src/${{ matrix.tool }}/setup.py)
          echo "::set-output name=version::$VERSION"

      - name: Package and publish
        if: ${{ steps.set-matrix.outputs.matrix }}
        env:
          TWINE_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.ARTIFACTORY_API_KEY }}
        run: |
          make package target=${{ matrix.tool }} build_number=${{ steps.get-version.outputs.version }}
          make publish target=${{ matrix.tool }} build_number=${{ steps.get-version.outputs.version }} url=${{ secrets.ARTIFACTORY_URL }}



# name: shared_tools_build
# run-name: Build number 1.0.${{ github.run_number }}

# on:   
#   workflow_dispatch:      

# jobs:
#   build_and_push_artifactory:
#       name: Build
#       runs-on: ubuntu-latest
#       strategy:
#         fail-fast: false
#         matrix:
#           package:
#             - vault
  
#       steps:
#         - uses: actions/checkout@v3
  
#         - name: Setup Python
#           uses: actions/setup-python@v2
#           with:
#             python-version: "3.12"
  
#         - name: Install dependencies  
#           run: |
#             cd ${{ matrix.package }}
#             python -m pip install --upgrade pip
#             pip install setuptools wheel twine
#         - name: Build the package
#           run: |
#             cd ${{ matrix.package }}
#             python setup.py sdist bdist_wheel
#         - name: Publish to JFrog Artifactory
#           env:
#             TWINE_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
#             TWINE_PASSWORD: ${{ secrets.ARTIFACTORY_API_KEY }}
#           run: |
#             cd ${{ matrix.package }}
#             twine upload --repository-url ${{ secrets.ARTIFACTORY_URL}} \
#             dist/*
#         - name: Clean up build artifacts
#           run: |
#             cd ${{ matrix.package }}
#             rm -rf dist build *.egg-info
#############################

# name: shared_tools_build
# run-name: Build number 1.0.${{ github.run_number }}

# on:   
#   workflow_dispatch:      

# jobs:
#   build_and_push_artifactory:
#       name: Build
#       runs-on: ubuntu-latest
#       strategy:
#         fail-fast: false
#         matrix:
#           package:
#             - vaultt
  
#       steps:
#         - uses: actions/checkout@v3
  
#         - name: Setup Python
#           uses: actions/setup-python@v2
#           with:
#             python-version: "3.12"

#         - name: Setup JFrog CLI
#           uses: jfrog/setup-jfrog-cli@v3
#           env:  
#             JF_URL: ${{ secrets.ARTIFACTORY_URL }}
#             JF_ACCESS_TOKEN: ${{ secrets.ARTIFACTORY_PASSWORD }}

#         - name: Set CLI Config
#           run: |
#             cd ${{ matrix.package }}
#             jf pip-config --global=true --repo-resolve=python-pypi
#             jf pip install .

#         - name: Install dependencies  
#           run: |
#             cd ${{ matrix.package }}
#             python -m pip install --upgrade pip
#             pip install poetry
#         - name: Build the package
#           run: |
#             cd ${{ matrix.package }}
#             python -m poetry build
#             jf rt upload dist/ python-pypi/

#         # - name: Publish to JFrog Artifactory
#         #   env:
#         #     ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
#         #     ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
#         #   run: |
#         #     cd ${{ matrix.package }}
#         #     poetry source add --priority=supplemental jfrog ${{ secrets.ARTIFACTORY_URL }}
#         #     poetry config http-basic.jfrog $ARTIFACTORY_USERNAME $ARTIFACTORY_PASSWORD
#         #     python -m poetry publish
#         # - name: Clean up build artifacts
#         #   run: |
#         #     cd ${{ matrix.package }}
#         #     rm -rf dist build *.egg-info



         
#       #  - name: Publish Build info With JFrog CLI
#       #    run: |
#       #     # Collect environment variables for the build
#       #     jf rt build-collect-env
#       #     # Collect VCS details from git and add them to the build
#       #     jf rt build-add-git
#       #     # Publish build info
#       #     jf rt build-publish
  
#       #   # - name: Install dependencies  
#         #   run: |
#         #     cd ${{ matrix.package }}
#         #     python -m pip install --upgrade pip
#         #     pip install setuptools wheel twine
#         # - name: Build the package
#         #   run: |
#         #     cd ${{ matrix.package }}
#         #     python setup.py sdist bdist_wheel
#         # - name: Publish to JFrog Artifactory
#         #   env:
#         #     TWINE_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
#         #     TWINE_PASSWORD: ${{ secrets.ARTIFACTORY_API_KEY }}
#         #   run: |
#         #     cd ${{ matrix.package }}
#         #     ls dist/
#         #     twine upload --repository-url ${{ secrets.ARTIFACTORY_URL}} \
#         #     dist/*
#         # - name: Clean up build artifacts
#         #   run: |
#         #     cd ${{ matrix.package }}
#         #     rm -rf dist build *.egg-info